{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 PRESENTATIE DATA W\
\
data = [0,1,2,3,4,5,\'85, n]\
0 = [comp1, comp2, \'85]\
1,2,3,4 = [output1, ouput2, output3, ..]\
\
P = plaatsen van 0.\
L = plaatsen van 1.\
\
n = [P(1), |P(1)|, L(1), |L(1)|,	P(2), |P(2)|, L(2), |L(2)|,	\'85]\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
FOR LOOP COMPARATORS\
\
nu:\
\
out: 3 = 0011\
inn: 6 = 0110\
inn 12 = 1100\
out: 5 = 0101\
inn: 10 = 1010\
out: 9 = 1001\
\
\
\
out: number = 1 << oShifts + 1\
inn: comp = number << outerShift;\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
GENERATE W\
\
int fstChannel;\
int sndChannel;\
\
int fstMask = 1 << fstChannel-1;	\
int sndMask = 1 << sndChannel-1;\
\
for(int nbOnes\'85)\
	boolean foundL = false;\
	boolean foundP = false;\
	int L = data[nbOnes][L] - fstMask; // 00111100110\
	int P = data[nbOnes][P] - sndMask; // 0001100110\
\
	for(short output : data[nbOnes]) \{\
		// int fstResult = output & fstMask; // 0 of 1\
		// int sndResult = output & sndMask; // 0 of 1\
		\
		// int L = L | (fstResult | sndResult)\
		// int L = L | (output & fstMask | output & sndMask)\
		// int L = L | (output & (fstMask | sndMask))\
\
		// if( !foundL) \{\
		int L = L | (output & comp);\
		//\}\
\
		if(L & comp == comp) \{\
		//if((L & comp) ^ comp == 0)\
			foundL = true;\
		\}\
		\
		//int fstResult = (output & mask) ^ mask; // 1 als output 0; anders omgekeerd\
		//int sndResult = (output & sndMask) ^ mask;\
\
		//output = 0 & comp = 1 => 1\
		//output = 1 & comp  = 1 => 0\
		//output = 0 & comp = 0 => 0\
		//output = 1 & comp = 0 => 0\
\
		//output ^ 1 = f(x)\
		//f(0) = 1\
		//f(1) = 0\
\
		// (output ^ ((1 << nbChannels) - 1)) & comp\
\
		// if (! foundP) \{\
		int P = P | ((output ^ ((1 << nbChannels) - 1))) & comp)\
		// \}\
\
		if(P & comp == comp) \{\
		//if((P & comp) ^ comp == 0)\
			foundP = true;\
		\}\
\
		if(foundP && foundL)\
			break;\
	\}\
	data[nbOnes][L] = L;\
	data[nbOnes][P] = P;\
\
		\
		\
	\
\
\
\
\
\
}